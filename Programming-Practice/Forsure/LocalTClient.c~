#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netdb.h>
#include <ifaddrs.h>
#include <string.h>
#include <malloc.h>
#include <errno.h>
#include <string.h>
#include <stdint.h>

#define BUF_SIZE 3000

#define DNSSERVER_LOCAL "192.168.17.129"
static const uint32_t QR_MASK = 0x8000;
static const uint32_t OPCODE_MASK = 0x7800;
static const uint32_t AA_MASK = 0x0400;
static const uint32_t TC_MASK = 0x0200;
static const uint32_t RD_MASK = 0x0100;
static const uint32_t RA_MASK = 0x8000;
static const uint32_t RCODE_MASK = 0x000F;

/* Response Type */
enum {
  Ok_ResponseType = 0,
  FormatError_ResponseType = 1,
  ServerFailure_ResponseType = 2,
  NameError_ResponseType = 3,
  NotImplemented_ResponseType = 4,
  Refused_ResponseType = 5
};

/* Resource Record Types */
enum {
  A_Resource_RecordType = 1,
  NS_Resource_RecordType = 2,
  CNAME_Resource_RecordType = 5,
  SOA_Resource_RecordType = 6,
  PTR_Resource_RecordType = 12,
  MX_Resource_RecordType = 15,
  TXT_Resource_RecordType = 16,
  AAAA_Resource_RecordType = 28,
  SRV_Resource_RecordType = 33
};

/* Operation Code */
enum {
  QUERY_OperationCode = 0, /* standard query */
  IQUERY_OperationCode = 1, /* inverse query */
  STATUS_OperationCode = 2, /* server status request */
  NOTIFY_OperationCode = 4, /* request zone transfer */
  UPDATE_OperationCode = 5 /* change resource records */
};

/* Response Code */
enum {
  NoError_ResponseCode = 0,
  FormatError_ResponseCode = 1,
  ServerFailure_ResponseCode = 2,
  NameError_ResponseCode = 3
};

/* Query Type */
enum {
  IXFR_QueryType = 251,
  AXFR_QueryType = 252,
  MAILB_QueryType = 253,
  MAILA_QueryType = 254,
  STAR_QueryType = 255
};

/*
* Types.
*/

/* Question Section */
struct Question {
  char *qName;
  uint16_t qType;
  uint16_t qClass;
  struct Question* next; // for linked list
};

/* Data part of a Resource Record */
union ResourceData {
  struct {
    char *txt_data;
  } txt_record;
  struct {
    uint8_t addr[4];
  } a_record;
  struct {
    char* MName;
    char* RName;
    uint32_t serial;
    uint32_t refresh;
    uint32_t retry;
    uint32_t expire;
    uint32_t minimum;
  } soa_record;
  struct {
    char*name;
  } name_server_record;
  struct {
    char* name;
  } cname_record;
  struct {
    char *name;
  } ptr_record;
  struct {
    uint16_t preference;
    char *exchange;
  } mx_record;
  struct {
    uint8_t addr[16];
  } aaaa_record;
  struct {
    uint16_t priority;
    uint16_t weight;
    uint16_t port;
    char *target;
  } srv_record;
};

/* Resource Record Section */
struct ResourceRecord {
  char *name;
  uint16_t type;
  uint16_t class;
  uint32_t ttl;
  uint16_t rd_length;
  union ResourceData rd_data;
  struct ResourceRecord* next; // for linked list
};

struct Message { 
  //used for tcp encode&decode 
  uint16_t msg_length;
  uint16_t id; /* Identifier */

  /* Flags */
  uint16_t qr; /* Query/Response Flag */
  uint16_t opcode; /* Operation Code */
  uint16_t aa; /* Authoritative Answer Flag */
  uint16_t tc; /* Truncation Flag */
  uint16_t rd; /* Recursion Desired */
  uint16_t ra; /* Recursion Available */
  uint16_t rcode; /* Response Code */

  uint16_t qdCount; /* Question Count */
  uint16_t anCount; /* Answer Record Count */
  uint16_t nsCount; /* Authority Record Count */
  uint16_t arCount; /* Additional Record Count */

  /* At least one question; questions are copied to the response 1:1 */
  struct Question* questions;

  /*
  * Resource records to be send back.
  * Every resource record can be in any of the following places.
  * But every place has a different semantic.
  */
  struct ResourceRecord* answers;
  struct ResourceRecord* authorities;
  struct ResourceRecord* additionals;
};

int Domain_Count(char* Domainname);

/*
* Debugging functions.
*/

void print_hex(uint8_t* buf, size_t len);
void print_resource_record(struct ResourceRecord* rr);
void print_query(struct Message* msg);

/*
* Basic memory operations.
*/

uint16_t get16bits(const uint8_t** buffer);
uint8_t get8bits(const uint8_t** buffer);
uint32_t get32bits(const uint8_t** buffer);
void put8bits(uint8_t** buffer, uint8_t value);
void put16bits(uint8_t** buffer, uint16_t value);
void put32bits(uint8_t** buffer, uint32_t value);

char* decode_domain_name(const uint8_t** buffer);

// foo.bar.com => 3foo3bar3com0
void encode_domain_name(uint8_t** buffer, const char* domain);


void decode_header(struct Message* msg, const uint8_t** buffer);
//caculate rr field
uint16_t ResourceField_Caculate(struct Message* msg);

void encode_header(struct Message* msg, uint8_t** buffer);

int encode_resource_records(struct ResourceRecord* rr, uint8_t** buffer);
/* @return 0 upon failure, 1 upon success */
int encode_msg(struct Message* msg, uint8_t** buffer);
int count_resource_records(struct ResourceRecord* rr);
int decode_msg(struct Message* msg,const uint8_t* buffer, int size);

int decode_resource_records(struct ResourceRecord** rr,const uint8_t** buffer,int Count);

int resolver_process(char* lookup,int type);
//int sender()
int main(int argc,char* argv[]){
        int type;
        if(argc>1){
        if(strcmp(argv[1],"A")==0)
        {
        type=1;
        }
        else if(strcmp(argv[1],"CNAME")==0)
        {
        type=5;
        }
        else if(strcmp(argv[1],"MX")==0){
        type=15;
        }
        else if(strcmp(argv[1],"PTR")==0){
        type=12;
        }
        else printf("Format error");
        }
        else{
          printf("\nplease input correct type\n");
        }
        char * lookup;
        if(argc>2)
        {lookup=strdup(argv[2]);
        printf("\ndomain:%s lookup,type:%d\n",lookup,type);
        }
        else
        printf("\nplease input the domainname");
       // if(argv[3]!=NULL)
       resolver_process(lookup,type);

}
void print_hex(uint8_t* buf, size_t len)
{
  int i;
  printf("%zu bytes:\n", len);
  for(i = 0; i < len; ++i)
    printf("%02x ", buf[i]);
  printf("\n"); 
}
void print_resource_record(struct ResourceRecord* rr)
{
  int i;
  while (rr)
  {
    printf("  ResourceRecord { name '%s', type %u, class %u, ttl %u, rd_length %u, ",
        rr->name,
        rr->type,
        rr->class,
        rr->ttl,
        rr->rd_length
   );

    union ResourceData *rd = &rr->rd_data;
    switch (rr->type)
    {
      case A_Resource_RecordType:
        printf("Address Resource Record { address ");
        for(i = 0; i < 4; ++i)
          printf("%s%u", (i ? "." : ""), rd->a_record.addr[i]);

        printf(" }");
        break;
      case NS_Resource_RecordType:
        printf("Name Server Resource Record { name %s }",
          rd->name_server_record.name
       );
        break;
      case CNAME_Resource_RecordType:
        printf("Canonical Name Resource Record { name %s }",
          rd->cname_record.name
       );
        break;
      case SOA_Resource_RecordType:
        printf("SOA { MName '%s', RName '%s', serial %u, refresh %u, retry %u, expire %u, minimum %u }",
          rd->soa_record.MName,
          rd->soa_record.RName,
          rd->soa_record.serial,
          rd->soa_record.refresh,
          rd->soa_record.retry,
          rd->soa_record.expire,
          rd->soa_record.minimum
       );
        break;
      case PTR_Resource_RecordType:
        printf("Pointer Resource Record { name '%s' }",
          rd->ptr_record.name
       );
        break;
      case MX_Resource_RecordType:
        printf("Mail Exchange Record { preference %u, exchange '%s' }",
          rd->mx_record.preference,
          rd->mx_record.exchange
       );
        break;
      case TXT_Resource_RecordType:
        printf("Text Resource Record { txt_data '%s' }",
          rd->txt_record.txt_data
       );
        break;
      case AAAA_Resource_RecordType:
        printf("AAAA Resource Record { address ");

        for(i = 0; i < 16; ++i)
          printf("%s%02x", (i ? ":" : ""), rd->aaaa_record.addr[i]);

        printf(" }");
        break;
      default:
        printf("Unknown Resource Record { ??? }");
    }
    printf("}\n");
    rr = rr->next;
  }
}
void print_query(struct Message* msg)
{
  printf("QUERY { ID: %02x", msg->id);
  printf(". FIELDS: [ QR: %u, OpCode: %u ]", msg->qr, msg->opcode);
  printf(", QDcount: %u", msg->qdCount);
  printf(", ANcount: %u", msg->anCount);
  printf(", NScount: %u", msg->nsCount);
  printf(", ARcount: %u,\n", msg->arCount);  
  struct Question* q = msg->questions;
  while (q)
  {
    printf("  Question { qName '%s', qType %u, qClass %u }\n",
      q->qName,
      q->qType,
      q->qClass
   );
    q = q->next;
  }

  print_resource_record(msg->answers);
  print_resource_record(msg->authorities);
  print_resource_record(msg->additionals);

  printf("}\n");
}
int Domain_Count(char* Domainname){
        char* DomainName=(char*)malloc(strlen(Domainname));
        strcpy(DomainName,Domainname);
        char* Domain;
         int len=0;
        int i=1;
        Domain=strtok(DomainName,".");
        len+=strlen(Domain);
        while(Domain!=NULL){
                Domain=strtok(NULL,".");
                if(Domain!=NULL){
                        //DivideResult[i]=Domain;
                 len+=strlen(Domain);
                 i++;
                }
        }
  return len+i+1;
}
uint16_t get16bits(const uint8_t** buffer)
{
  uint16_t value;

  memcpy(&value, *buffer, 2);
  *buffer += 2;

  return ntohs(value);
}
uint8_t get8bits(const uint8_t** buffer){
  uint8_t value;
  memcpy(&value,*buffer,1);
  *buffer+=1;
  return value;
}
uint32_t get32bits(const uint8_t** buffer){
  uint32_t value;
  memcpy(&value,*buffer,4);
  *buffer+=4;
  return ntohl(value);
}
void put8bits(uint8_t** buffer, uint8_t value)
{
  memcpy(*buffer, &value, 1);
  *buffer += 1;
}
void put16bits(uint8_t** buffer, uint16_t value)
{
  value = htons(value);
  memcpy(*buffer, &value, 2);
  *buffer += 2;
}
void put32bits(uint8_t** buffer, uint32_t value)
{
  value = htons(value);
  memcpy(*buffer, &value, 4);
  *buffer += 4;
}
char* decode_domain_name(const uint8_t** buffer){

  char name[256];
  const uint8_t* buf = *buffer;
  int j = 0;
  int i = 0;

  while (buf[i] != 0)
  {
    //if (i >= buflen || i > sizeof(name))
    //  return NULL;

    if (i != 0)
    {
      name[j] = '.';
      j += 1;
    }

    int len = buf[i];
    i += 1;

    memcpy(name+j, buf+i, len);
    i += len;
    j += len;
  }

  name[j] = '\0';

  *buffer += i + 1; //also jump over the last 0

  return strdup(name);
}
void encode_domain_name(uint8_t** buffer, const char* domain){
  uint8_t* buf = *buffer;
  const char* beg = domain;
  const char* pos;
  int len = 0;
  int i = 0;

  while ((pos = strchr(beg, '.')))
  {
    len = pos - beg;
    buf[i] = len;
    i += 1;
    memcpy(buf+i, beg, len);
    i += len;

    beg = pos + 1;
  }

  len = strlen(domain) - (beg - domain);

  buf[i] = len;
  i += 1;

  memcpy(buf + i, beg, len);
  i += len;

  buf[i] = 0;
  i += 1;

  *buffer += i;
}
void decode_header(struct Message* msg, const uint8_t** buffer)
{
  msg->msg_length=get16bits(buffer);
  msg->id = get16bits(buffer);

  uint32_t fields = get16bits(buffer);
  msg->qr = (fields & QR_MASK) >> 15;
  msg->opcode = (fields & OPCODE_MASK) >> 11;
  msg->aa = (fields & AA_MASK) >> 10;
  msg->tc = (fields & TC_MASK) >> 9;
  msg->rd = (fields & RD_MASK) >> 8;
  msg->ra = (fields & RA_MASK) >> 7;
  msg->rcode = (fields & RCODE_MASK) >> 0;

  msg->qdCount = get16bits(buffer);
  msg->anCount = get16bits(buffer);
  msg->nsCount = get16bits(buffer);
  msg->arCount = get16bits(buffer);
}
uint16_t ResourceField_Caculate(struct Message* msg){
  uint16_t len=0;
  printf("\ncaculating rr field \n");
  if(msg->anCount!=0)
     len+=(uint16_t)count_resource_records(msg->answers);
  if(msg->arCount!=0)
     len+=(uint16_t)count_resource_records(msg->authorities);
  if(msg->nsCount!=0)
     len+=(uint16_t)count_resource_records(msg->additionals);
  printf("\ncaculate finish\n");
  return len;
}

void encode_header(struct Message* msg, uint8_t** buffer)
{
  //msg->msg_length=(uint16_t)(12+msg->qdCount*8+
  //(msg->qdCount+msg->anCount+msg->nsCount+msg->arCount)*16);
  printf("msg length%d",msg->msg_length);
  
  //printf("!!!!msg length:%d",msg->msg_length);
  //msg->msg_length=msg->msg_length+msg->anCount*(sizeof(struct ResourceData)+sizeof(struct ResourceRecord));
  
  put16bits(buffer,msg->msg_length);
  put16bits(buffer, msg->id);

  int fields = 0;
  fields |= (msg->qr << 15) & QR_MASK;
  fields |= (msg->rcode << 0) & RCODE_MASK;
  // TODO: insert the rest of the fields
  put16bits(buffer, fields);

  put16bits(buffer, msg->qdCount);
  put16bits(buffer, msg->anCount);
  put16bits(buffer, msg->nsCount);
  put16bits(buffer, msg->arCount);
}
int count_resource_records(struct ResourceRecord* rr){
  int len=0;
  while(rr){
    len+=Domain_Count(rr->name);
    if(rr->type)
      len+=2;
    if(rr->class)
      len+=2;
    if(rr->ttl)
      len+=4;
    if(rr->rd_length)
      len+=2;
    switch(rr->type)
    {
      case A_Resource_RecordType:
      len+=4;
      break;
      case CNAME_Resource_RecordType:
      len=len+Domain_Count(rr->rd_data.cname_record.name);
      //CNAME record have to count the byte 
      break;
      case MX_Resource_RecordType:
      len=len+Domain_Count(rr->rd_data.mx_record.exchange)+2;
      break;
      case PTR_Resource_RecordType:
      len+=Domain_Count(rr->rd_data.ptr_record.name)+2;
      break;
      default:
      printf("cannot find kind\n");
    }
    rr=rr->next;  
  }
  printf("\nRecord Count %d",len);
  return len;
}
int encode_resource_records(struct ResourceRecord* rr, uint8_t** buffer)
{
  int i;
  printf("\n\n encode below \n\n");
  print_resource_record(rr);
  while (rr)
  {
    printf("\nencoding rr\n");
    // Answer questions by attaching resource sections.
    encode_domain_name(buffer, rr->name);
    put16bits(buffer, rr->type);
    put16bits(buffer, rr->class);
    put32bits(buffer, rr->ttl);
    put16bits(buffer, rr->rd_length);
    
    switch (rr->type)
    {
      case A_Resource_RecordType:
        for(i = 0; i < 4; ++i)
          put8bits(buffer, rr->rd_data.a_record.addr[i]);
        break;
      case AAAA_Resource_RecordType:
        for(i = 0; i < 16; ++i)
          put8bits(buffer, rr->rd_data.aaaa_record.addr[i]);
        break;
      case CNAME_Resource_RecordType:
        //put_rdstring_in_buffer(buffer,rr->rd_data.cname_record.name);
        encode_domain_name(buffer,rr->rd_data.cname_record.name);
        break;
      case MX_Resource_RecordType:
          put16bits(buffer,rr->rd_data.mx_record.preference);
          encode_domain_name(buffer,rr->rd_data.mx_record.exchange);
          break;
      case PTR_Resource_RecordType:
          encode_domain_name(buffer,rr->rd_data.ptr_record.name);
      default:
        fprintf(stderr, "Unknown type %u. => Ignore resource record.\n", rr->type);
      return 1;
    }
    printf("\n put in success\n");
    rr = rr->next;
  }

  return 0;
}
int encode_msg(struct Message* msg, uint8_t** buffer)
{
  struct Question* q;
  int rc;

  encode_header(msg, buffer);

  q = msg->questions;
  while (q)
  {
    encode_domain_name(buffer, q->qName);
    put16bits(buffer, q->qType);
    put16bits(buffer, q->qClass);

    q = q->next;
  }

  rc = 0;
  rc |= encode_resource_records(msg->answers, buffer);
  rc |= encode_resource_records(msg->authorities, buffer);
  rc |= encode_resource_records(msg->additionals, buffer);

  return rc;
}
int decode_msg(struct Message* msg,const uint8_t* buffer, int size)
{
  int i;

  decode_header(msg, &buffer);

 /* if (msg->anCount != 0 || msg->nsCount != 0)
  {
    printf("Only questions expected!\n");
    return -1;
  }*/

  // parse questions
  uint32_t qcount = msg->qdCount;
  struct Question* qs = msg->questions;
  for (i = 0; i < qcount; ++i)
  {
    struct Question* q = malloc(sizeof(struct Question));

    q->qName = decode_domain_name(&buffer);
    q->qType = get16bits(&buffer);
    q->qClass = get16bits(&buffer);

    // prepend question to questions list
    q->next = qs;
    msg->questions = q;
  }
  msg->answers=NULL;
  msg->additionals=NULL;
  msg->authorities=NULL;

  decode_resource_records(&msg->answers,&buffer,msg->anCount);
  decode_resource_records(&msg->authorities,&buffer,msg->nsCount);
  
  decode_resource_records(&msg->additionals,&buffer,msg->arCount);
  printf("Additionnals\n");
  print_resource_record(msg->additionals);
  printf("\n");
  return 0;
}

int decode_resource_records(struct ResourceRecord** rr, const uint8_t** buffer,int Count)
{
  if(Count==0)return 0;
  printf("\ndecoding resource records\n");
  int i,j;
  int rrcount=Count;
  struct ResourceRecord* as=*rr;
  printf("\n decode record \n");
  for(i=0;i<rrcount;i++)
  {
    struct ResourceRecord* r=(struct ResourceRecord*)malloc(sizeof(struct ResourceRecord));
    r->name=decode_domain_name(buffer);
    r->type=get16bits(buffer);
    r->class=get16bits(buffer);
    r->ttl=get32bits(buffer);
    r->rd_length=get16bits(buffer);
    switch(r->type){
    case A_Resource_RecordType:
    for(j=0;j<4;j++)
      r->rd_data.a_record.addr[j]=get8bits(buffer);
    break;
    case CNAME_Resource_RecordType:
      r->rd_data.cname_record.name=decode_domain_name(buffer);
      break;
    case MX_Resource_RecordType:
    r->rd_data.mx_record.preference=get16bits(buffer);
    r->rd_data.mx_record.exchange=decode_domain_name(buffer);
    break;
    case PTR_Resource_RecordType:
      r->rd_data.ptr_record.name=decode_domain_name(buffer);
    break;
    //case MX_Resource_RecordType:
    }
    r->next=as;
    *rr=r;
    as=*rr;
    printf("decode success");
  }
  //*rr=as;
  print_resource_record(*rr);
  return 1;
}
int resolver_process(char* lookup,int type){
      uint8_t buffer[BUF_SIZE];
      
      struct Message msg;
      memset(&msg,0,sizeof(struct Message));
      struct Question * q=(struct Question*)malloc(sizeof(struct Question));
      msg.msg_length=0;
      msg.id=(uint16_t) htons(getpid());
      msg.qr=0;
      msg.aa=0;
      msg.opcode=0;
      msg.ra=0;
      msg.tc=0;
      msg.rd=1;
      msg.rcode=0;
      msg.qdCount=1;
      msg.anCount=0;
      msg.nsCount=0;
      msg.arCount=0;

      q->qName=strdup(lookup);
      q->qClass=1;
      q->qType=type;
      msg.questions=q;
      msg.msg_length=Domain_Count(q->qName)+16;
      printf("\nmsg_length:%d\n",msg.msg_length);
      struct sockaddr_in dnsserver;
      dnsserver.sin_family=AF_INET;
      dnsserver.sin_port=htons(53);
      dnsserver.sin_addr.s_addr=inet_addr(DNSSERVER_LOCAL);
      int s=socket(AF_INET,SOCK_STREAM,0);
      if(connect(s,(struct sockaddr*)&dnsserver,sizeof(dnsserver))<0){
          printf("connect fail\n");
          exit(1);
      }

      print_query(&msg);
      uint8_t *p=buffer;
      encode_msg(&msg,&p);

      send(s,buffer,msg.msg_length+2,0);
      printf("\nquery send\n");
      int nbytes=recv(s,buffer,BUF_SIZE,0);
      decode_msg(&msg,buffer,nbytes);

      printf("\nAll I get!!!!\n");
      print_query(&msg);
      close(s);

  }